#version 450 core
layout(triangles, equal_spacing, ccw) in;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2);
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2);

in vec3 fragPosTC[];
in vec2 texCoordsTC[];

out vec3 fragPosES;
out vec3 normalES;
out vec2 texCoordsES;
out float heightES;
out vec4 fragPosLightSpaceES;

uniform mat4 u_model;
uniform mat4 u_view;
uniform mat4 u_projection;
uniform mat4 u_lightSpaceMatrix;

uniform sampler2D u_heightMap;
uniform sampler2D u_heightMap2;
uniform float u_waveHeight;
uniform float u_heightTile;
uniform float u_heightTile2;
uniform float u_time;
uniform float u_speedX;
uniform float u_speedY;

void main()
{
	texCoordsES = interpolate2D(texCoordsTC[0],texCoordsTC[1],texCoordsTC[2]);
	texCoordsES.x = texCoordsES.x + u_time * 0.05 * u_speedX;
	texCoordsES.y = texCoordsES.y + u_time * 0.05 * u_speedY;
	
	float yPos = ((((texture(u_heightMap,texCoordsES * u_heightTile).r) * 2) - 1) + (((texture(u_heightMap2,texCoordsES * (u_heightTile2 / 2)).r) * 2) - 1)) / 2;
	
	yPos = yPos * u_waveHeight;
	
	fragPosES = interpolate3D(fragPosTC[0],fragPosTC[1],fragPosTC[2]);
	fragPosES.y = fragPosES.y + yPos;
	
	
	fragPosLightSpaceES = u_lightSpaceMatrix * vec4(fragPosES, 1.0);
	heightES = fragPosES.y / u_waveHeight;
	gl_Position = u_projection * u_view * vec4(fragPosES, 1.0);
	
	float right = (textureOffset(u_heightMap,texCoordsES,ivec2(1,0)).r) * u_waveHeight;
	float left = (textureOffset(u_heightMap,texCoordsES,ivec2(-1,0)).r) * u_waveHeight;
	float up = (textureOffset(u_heightMap,texCoordsES,ivec2(0,1)).r) * u_waveHeight;
	float down = (textureOffset(u_heightMap,texCoordsES,ivec2(0,-1)).r) * u_waveHeight;
	
	normalES = normalize(vec3(left - right,2.0,up-down));
} 

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}
