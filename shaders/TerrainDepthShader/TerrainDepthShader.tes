#version 450 core
layout(triangles, equal_spacing, ccw) in;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2);
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2);

in vec3 fragPosTC[];
in vec2 texCoordsTC[];

out vec3 fragPosES;
out vec2 texCoordsES;

uniform mat4 u_lightSpaceMatrix;

uniform float u_heightScale;
uniform sampler2D u_heightMap;
uniform float u_heightTile;

void main()
{
	texCoordsES = interpolate2D(texCoordsTC[0],texCoordsTC[1],texCoordsTC[2]);
	float yPos = (((texture(u_heightMap,texCoordsES * u_heightTile).r) * 2) - 1);
	yPos = yPos * u_heightScale;
	fragPosES = interpolate3D(fragPosTC[0],fragPosTC[1],fragPosTC[2]);
	fragPosES.y = fragPosES.y + yPos;
	
	gl_Position = u_lightSpaceMatrix * vec4(fragPosES, 1.0);
} 

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}
