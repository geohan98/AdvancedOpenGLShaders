#version 450 core

// reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw)
layout(triangles, equal_spacing, ccw) in;

// forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;

vec3 calcNormal();


// unifrom matrices to perform transformations
// previously this would have been done in vertex shader
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform sampler2D heightMap;
uniform float heightMapScale;

// read in vector arrays from previous shader
in vec3 posTC[] ;
in vec2 texCorrdsTC[];

// pass along the interpolated values
out vec3 fragPosES;
out vec2 texCoordsES;
out vec3 normalES;



void main()
{
    // interpolate the normal and xyz position using the linear interpolation function
    // use 3D because they are in three dimensions; 2D also included for uv texture coordinates

   fragPosES = interpolate3D(posTC[0], posTC[1], posTC[2]) ;
   texCoordsES = interpolate2D(texCorrdsTC[0],texCorrdsTC[1],texCorrdsTC[2]);
   
   fragPosES.y = texture(heightMap,texCoordsES).x * heightMapScale;


   // transform vertex to clip space  - NOTE: WE NEED TO DO IT HERE NOW and not in vertex shader
   
   gl_Position = projection * view * model* vec4(fragPosES, 1.0);
   
   
   normalES = calcNormal();
   fragPosES = vec3(model * vec4(fragPosES,1.0));

} 


//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

vec3 calcNormal()
{
	float right;
	float left;
	float up;  
	float down;
	
	right = (textureOffset(heightMap,texCoordsES,ivec2(1,0)).r * heightMapScale);
	left = (textureOffset(heightMap,texCoordsES,ivec2(-1,0)).r) * heightMapScale;
	up = (textureOffset(heightMap,texCoordsES,ivec2(0,1)).r * heightMapScale);
	down = (textureOffset(heightMap,texCoordsES,ivec2(0,-1)).r * heightMapScale);
	
	
	vec3 value = vec3((left - right),2.0,(up - down));
	value = normalize(value);
	return value;
}
