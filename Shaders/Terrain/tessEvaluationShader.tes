#version 450 core

// reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw)
layout(triangles, equal_spacing, ccw) in;


vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform sampler2D heightMap;
uniform float heightMapScale;

in vec3 posTC[] ;
in vec2 texCorrdsTC[];

out vec3 fragPosES;
out vec3 normalES;

void main()
{
	vec3 fragPos = interpolate3D(posTC[0], posTC[1], posTC[2]);
	fragPosES = fragPos;
	vec2 texCoords = interpolate2D(texCorrdsTC[0],texCorrdsTC[1],texCorrdsTC[2]);
	fragPos.y = texture(heightMap,texCoords).x * heightMapScale;
   
	gl_Position = projection * view * model* vec4(fragPos, 1.0);
	
	float right = (textureOffset(heightMap,texCoords,ivec2(1,0)).r)*heightMapScale;
	float left = (textureOffset(heightMap,texCoords,ivec2(-1,0)).r)*heightMapScale;
	float up = (textureOffset(heightMap,texCoords,ivec2(0,1)).r)*heightMapScale;
	float down = (textureOffset(heightMap,texCoords,ivec2(0,-1)).r)*heightMapScale;
	
	normalES = normalize(vec3(left - right,2.0,up-down));
} 


//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}
